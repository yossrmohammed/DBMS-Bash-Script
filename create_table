#! /bin/bash

echo "Enter the table name:"
read table_name



 while ! [[ $table_name =~ ^[a-zA-Z_][a-zA-Z0-9_" "]*$ ]]; 
  do
    while [[ -z $table_name ]]
        do
          echo "Cannot be Empty !! "
          echo "Please try again."
          read table_name
        done

    echo "Error: $table_name is not in the correct format."
    echo "Please try again."
    read table_name
  done

# -e is to make sure that table name is unique
# -e ==> exists 
while [[ -e "$table_name" ]]
  do
    echo "Error: $table_name already exists in the current database."
    echo "Please enter a different table name :"
    read table_name
  done


if [[ $table_name == *' '* ]]
then
table_name=$(echo "$table_name" | tr ' ' '_')
fi


# Ask for the number of columns
echo "Enter the number of columns:"
read num_columns
while ! [[ $num_columns =~ ^[1-9]+$ ]]; do

    while [[ -z $num_columns ]]
        do
          echo "Cannot be Empty !! "
          echo "Please try again."
          read num_columns
        done

        echo "Error: value must be a positive number."
        echo "Please try again."
        read num_columns
      done

# Initialize an empty string for the column names


# Initialize an empty array to store column names
declare -a column_names

for (( i=1; i<=num_columns; i++ )); do
    # Ask for the column name
    echo "Enter name for column $i:"
    read column_name

    while [[ -z $column_name ]]; do
        echo "Cannot be Empty !! "
        echo "Please try again."
        read column_name
    done

    # Check if the column name already exists
    while [[ " ${column_names[@]} " =~ " $column_name " ]]; do
        echo "Column name '$column_name' already exists. Please enter a unique name."
        read column_name
    done

    # If there are spaces in the column name, replace them with underscores
    if [[ $column_name == *' '* ]]; then
        column_name=$(echo "$column_name" | tr ' ' '_')
    fi

    # Store the column name in the array
    column_names+=("$column_name")

    # The while loop ensures correct input and handles empty input
    # without it, the enter key without input breaks the condition
    while true; do
        echo "Select data type for column $i:"
        echo "1. int"
        echo "2. string"

        read selection

        case $selection in
            1) data_type="int"; break ;;
            2) data_type="string"; break ;;
            *) echo "Invalid selection. Please choose 1 for int or 2 for string." ;;
        esac
    done

    columns+="$column_name($data_type),"
done


# after getting all data it should end with an extra , so this next line is to remove it.
columns=${columns%?}
# another method is to use columns=${columns:0:-n}
# where 0 is the index (starting from the last character ) and n is the number of characters to be removed

# now columns are stored in the table file
echo $columns > "$table_name.table"

# primary key selection
    if [[ $num_columns -gt 1 ]]
      then
        IFS=, 
        # changing columns from a line into an array
        # changes it from id(int),name(string) --> 1.id 2.name and so on
        read -a column_array <<< "$columns"
        echo "Now choose your primary key:"
        echo "Available columns:"  
        for (( i=0; i<${#column_array[@]}; i++ ))
            do
              echo "$((i+1)). ${column_array[i]}"
            done

        read primary_key_selection

        # Checking if the number is within range 
        while true;
        do

          while [[ -z $primary_key_selection ]]
        do
          echo "Cannot be Empty !! "
          echo "Please try again."
          read primary_key_selection
        done

            if [[ $primary_key_selection -ge 1 && $primary_key_selection -le ${#column_array[@]} ]]
              then
                  primary_key=${column_array[$((primary_key_selection-1))]}
                  echo "You selected $primary_key as the primary key"
                  break 
              else
                  echo "Invalid selection. Please try again."
                  read primary_key_selection
            fi
        done

      # if there is only one column it is set as primary key by default
      else
          primary_key=$columns
          echo "Automatically set $primary_key as the primary key"
    fi

# storing primary key in another file
echo $primary_key > $table_name".table_primarykey"


echo "Table $table_name created with columns: $columns"
echo " with $primary_key as the primary key"
