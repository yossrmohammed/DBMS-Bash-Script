#!/bin/bash


# List all the available tables
# here the ( ) creates an array of the files that end with .file
# this is much robust way than my original idea --> ( read -a tables <<< "$(ls | grep '\.file$')
tables=( *.file )


# Checks if there are any tables
# if the number of members of the array is equal to zero then the array is empty 
# found this method to return to the original script (source)
if [[ ${#tables[@]} -eq 0 ]]
then
  echo "No tables found."
  source # add the name of the calling script  
fi


# Display the tables
# in case #{$tables[@]} this always is 1 bec number of arrays is 1
#  ${} --> means variable 
#  # -> means number
#  tables[@] --> means each member of the array
echo "Available tables:"
for (( i=0; i<${#tables[@]}; i++ ))
do
  echo "$((i+1)). ${tables[i]}"
done



# Ask for the table selection
# loop that only ends in case of right choice :
while true
do
  echo "Enter the number of the table you want to select:"
  read selection

  # Check if the selection is valid
  if [[ $selection -ge 1 && $selection -le ${#tables[@]} ]]
  then
    table_name=${tables[$((selection-1))]}
    echo "You selected $table_name"
    break
  else
    echo "Invalid selection. Please try again."
  fi
done


# Get the column names and data types
# -n option with head specifies the number of the lines to show
IFS=',' read -a columns <<< "$(head -n 1 "$table_name")"

# Loop over the columns
for column in "${columns[@]}"
do
  # Extract the column name and data type

  IFS='(' read -a parts <<< "$column"
  column_name="${parts[0]}"
  data_type="${parts[1]%%)}"

  # Ask for the data
  echo "Enter data for $column_name ($data_type):"
  read data


  while [[ $(cut -d ',' -f 1 "$table_name" | sort | uniq -d) ]]
do
  echo "This is the primary key so it must be unique."
  # Ask for a new input
  read -p "Enter a unique value"
done

  # Validate the data
  case $data_type in
    int)
      # Check if the data is an integer
      # this ^[0-9]+$ forces numbers only
     while ! [[ $data =~ ^[0-9]+$ ]]; do
      echo "Error: $data is not an integer."
      echo "Please try again."
      read data
    done
      ;;

    string)
      # Check if the data is a string
      while ! [[ $data =~ ^[a-zA-Z0-9_]*$ ]]; do
        echo "Error: $data is not in the correct format."
        echo "Please try again."
        read data
      done
      ;;
  esac

  # Add the data to the row
  row+="$data,"
done

# Remove the trailing comma
row=${row%?}

# Add the row to the table
echo $row >> "$table_name"

echo "Data is added to $table_name: $row"
