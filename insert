#!/bin/bash

# List all the available tables
#tables=( *.file )
read -a tables <<< "$(ls | grep '\.table$')"
# Check if there are any tables
if [[ ${#tables[@]} -eq 0 ]]
then
  echo "No tables found."
  exit 1
fi

# Display the tables
echo "Available tables:"
for (( i=0; i<${#tables[@]}; i++ ))
do
  echo "$((i+1)). ${tables[i]}"
done

# Ask for the table selection
while true
do
  echo "Enter the number of the table you want to select:"
  read selection

  # Check if the selection is valid
  if [[ $selection -ge 1 && $selection -le ${#tables[@]} ]]
  then
    table_name=${tables[$((selection-1))]}
    echo "You selected $table_name"
    break
  else
    echo "Invalid selection. Please try again."
  fi
done

# Get the column names and data types
IFS=',' read -r -a columns <<< "$(head -n 1 "$table_name")"

# Loop over the columns
for column in "${columns[@]}"
do
  # Extract the column name and data type
  IFS='(' read -r -a parts <<< "$column"
  column_name="${parts[0]}"
  data_type="${parts[1]%%)}"

  # Ask for the data
  echo "Enter data for $column_name ($data_type):"
  read data

  # Validate the data
  case $data_type in
    int)
      # Check if the data is an integer
     while ! [[ $data =~ ^[0-9]+$ ]]; do
      echo "Error: $data is not an integer."
      echo "Please try again."
      read data
    done

      ;;

    string)
      # Check if the data is a string
      while ! [[ $data =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; do
        echo "Error: $data is not in the correct format."
        echo "Please try again."
        read data
      done

      ;;
  esac

  # Add the data to the row
  row+="$data,"
done

# Remove the trailing comma
row=${row%?}

# Add the row to the table
echo $row >> "$table_name"

echo "Row added to $table_name: $row"
